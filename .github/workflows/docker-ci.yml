name: CI - Build, Test and Push Docker Image

on:
  push:
    branches: [ main ]

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extrair metadados para Docker (tags e labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: yuripaixao/hc-devops
          # Cria duas tags: uma com o SHA do commit e 'latest' para a branch main
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build da imagem Docker (sem push)
        uses: docker/build-push-action@v5
        with:
          context: .
          # Constrói a imagem e a carrega no daemon do Docker local para ser testada.
          load: true
          # Não envia para o registry ainda.
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Testar a aplicação com Docker Compose
        run: |
          echo "Iniciando teste de integração com a imagem..."
          # Usa o docker-compose para criar o ambiente de teste.
          # Ele usará a imagem local 'yuripaixao/hc-devops:latest' que acabamos de buildar.
          # O docker-compose gerencia a rede entre a app e o redis automaticamente.
          docker compose up -d

          echo "Aguardando a aplicação iniciar..."
          for i in {1..10}; do
            # A verificação do health check é simplificada.
            # curl -f falha (retorna não-zero) se o status HTTP for >= 400.
            # O endpoint /health retorna 200 para UP (sucesso) e 503 para DOWN (falha).
            if curl -sf http://localhost:5000/health; then
              echo "Health check OK! O teste passou."
              docker compose down
              exit 0
            fi
            echo "Tentativa $i falhou. Aguardando 2 segundos..."
            sleep 2
          done
          
          echo "Health check falhou após várias tentativas."
          docker compose logs
          docker compose down
          exit 1

      - name: Push da imagem para o Docker Hub
        # Este passo só roda se o passo de teste for bem-sucedido
        if: success()
        run: docker push --all-tags yuripaixao/hc-devops

  deploy:
    runs-on: ubuntu-latest
    # Garante que este job só rode após o sucesso do job anterior
    needs: build-test-and-push
    name: Deploy to EC2

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Deploy to EC2 via SSH
        run: |
          # Copia o arquivo docker-compose.yml para um diretório temporário no servidor
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa docker-compose.yml \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/docker-compose.yml

          # Executa os comandos de deploy no servidor remoto
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          APP_DIR=~/app
          mkdir -p $APP_DIR
          mv /tmp/docker-compose.yml $APP_DIR/docker-compose.yml
          cd $APP_DIR
          sudo docker compose pull
          sudo docker compose up -d
          sudo docker image prune -af
          EOF